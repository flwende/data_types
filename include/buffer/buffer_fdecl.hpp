// Copyright (c) 2017-2018 Florian Wende (flwende@gmail.com)
//
// Distributed under the BSD 2-clause Software License
// (See accompanying file LICENSE)

#if !defined(DATA_TYPES_FDECL_HPP)
#define DATA_TYPES_FDECL_HPP

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// some forward declarations: implementations / specializations below
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
namespace XXX_NAMESPACE
{
	////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	//! \brief A fixed sized array
	//!
	//! \tparam T data type
	//! \tparam D array size
	////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	template <typename T, std::size_t D>
	class sarray;

	namespace detail
	{
		////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		//! \brief Definition of some math functions for different FP types
		////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		template <typename T>
		struct math;

		////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		//! \brief A proxy data type for vec<T, D>
		//!
		//! This data type is returned by buffer<T, D, Layout, Alignment>::operator[]() if D = 1 and Layout=SoA.
		//! It holds references to component(s) x [,y [and z]] in main memory, so that data access via,
		//! e.g. obj[ ]..[ ].x, is possible.
		//!
		//! \tparam T data type
		//! \tparam D dimension
		////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		template <typename T, std::size_t D>
		class proxy_vec;
	}
}

#endif
